{
  
    
        "post0": {
            "title": "KERRY MATRIX",
            "content": "#IMPORTS import pandas as pd from matplotlib import pyplot as plt rtData = pd.read_csv(&#39;https://d14wlfuexuxgcm.cloudfront.net/covid/rt.csv&#39;) dailyData = pd.read_csv(&#39;https://covidtracking.com/api/v1/states/daily.csv&#39;) . #SET VARIABLES today = &#39;2020-08-02&#39; week = &#39;2020-08-02/2020-07-26&#39; dateRange = &#39;20200802&#39; . #KERRY LOCATIONS AND POPULATION DATA kerryLocations = pd.read_csv(&#39;kerry.csv&#39;) kerryLocations.columns = map(str.lower, kerryLocations.columns) kerryCols=[&#39;state&#39;, &#39;population&#39;] kerryLocs = kerryLocations[kerryCols] print (&#39;Kerry Locations Information being loaded...&#39;) kerryLocs . Kerry Locations Information being loaded... . state population . 0 AL† | 4,903,185 | . 1 AR† | 3,017,804 | . 2 CA* | 39,512,223 | . 3 FL* | 21,477,737 | . 4 GA | 10,617,423 | . 5 IA | 3,155,070 | . 6 IL | 12,671,821 | . 7 IN† | 6,732,219 | . 8 KS | 2,913,314 | . 9 MD | 6,045,680 | . 10 ME | 1,344,212 | . 11 MN | 5,639,632 | . 12 MO | 6,137,428 | . 13 MS† | 2,976,149 | . 14 NJ† | 8,882,190 | . 15 NY | 19,453,561 | . 16 OH | 11,689,100 | . 17 TN | 6,829,174 | . 18 TX* | 28,995,881 | . 19 VA | 8,535,519 | . 20 WA† | 7,614,893 | . 21 WI | 5,822,434 | . #rtlive data cleaning rtCleaned = rtData[rtData[&#39;date&#39;]==today] rtColumns = [&#39;date&#39;, &#39;region&#39;, &#39;mean&#39;] rtCleaned = rtCleaned[rtColumns] rtCleaned = rtCleaned.rename(columns = {&#39;region&#39;:&#39;state&#39;}) rtCleaned = rtCleaned.sort_values(&#39;state&#39;, ascending=True) #PRINT CLEANED DATA print (&#39;rtLive Data being loaded...&#39;) rtCleaned . rtLive Data being loaded... . date state mean . 7999 2020-08-02 | AK | 1.044038 | . 3674 2020-08-02 | AL | 1.038194 | . 4947 2020-08-02 | AR | 1.032027 | . 7165 2020-08-02 | AZ | 0.868990 | . 7844 2020-08-02 | CA | 0.887025 | . 6379 2020-08-02 | CO | 0.998260 | . 952 2020-08-02 | CT | 0.981955 | . 2076 2020-08-02 | DC | 1.038579 | . 1594 2020-08-02 | DE | 0.946947 | . 2723 2020-08-02 | FL | 0.963125 | . 2560 2020-08-02 | GA | 0.951249 | . 8158 2020-08-02 | HI | 1.344259 | . 4631 2020-08-02 | IA | 0.987130 | . 6845 2020-08-02 | ID | 1.008629 | . 3997 2020-08-02 | IL | 1.079792 | . 3353 2020-08-02 | IN | 1.003324 | . 5740 2020-08-02 | KS | 1.064063 | . 2884 2020-08-02 | KY | 1.051189 | . 5106 2020-08-02 | LA | 0.911052 | . 629 2020-08-02 | MA | 1.045733 | . 1756 2020-08-02 | MD | 1.031470 | . 153 2020-08-02 | ME | 0.935425 | . 3519 2020-08-02 | MI | 0.990569 | . 4316 2020-08-02 | MN | 1.104105 | . 4791 2020-08-02 | MO | 1.162356 | . 4472 2020-08-02 | MS | 1.070742 | . 6691 2020-08-02 | MT | 1.044862 | . 2238 2020-08-02 | NC | 1.014149 | . 5262 2020-08-02 | ND | 1.091882 | . 5580 2020-08-02 | NE | 1.109083 | . 313 2020-08-02 | NH | 1.012778 | . 1276 2020-08-02 | NJ | 0.973840 | . 6217 2020-08-02 | NM | 0.926463 | . 7682 2020-08-02 | NV | 1.090898 | . 1115 2020-08-02 | NY | 0.962816 | . 3193 2020-08-02 | OH | 0.941024 | . 5898 2020-08-02 | OK | 0.995248 | . 7525 2020-08-02 | OR | 1.072128 | . 1437 2020-08-02 | PA | 0.977182 | . 792 2020-08-02 | RI | 1.141209 | . 2399 2020-08-02 | SC | 0.905029 | . 5419 2020-08-02 | SD | 1.119219 | . 3834 2020-08-02 | TN | 0.984245 | . 6060 2020-08-02 | TX | 0.956087 | . 7003 2020-08-02 | UT | 1.014811 | . 1916 2020-08-02 | VA | 1.095967 | . 474 2020-08-02 | VT | 0.838499 | . 7364 2020-08-02 | WA | 1.089897 | . 4155 2020-08-02 | WI | 0.917461 | . 3034 2020-08-02 | WV | 0.951932 | . 6535 2020-08-02 | WY | 1.006348 | . #DAILY DATA CLEANING dailyColumns = [&#39;date&#39;, &#39;state&#39;, &#39;death&#39;, &#39;positiveIncrease&#39;, &#39;totalTestResultsIncrease&#39;, &#39;deathIncrease&#39;] dailyData = dailyData[dailyColumns] dailyData = dailyData.sort_values(&#39;state&#39;, ascending=True) dailyCleaned = dailyData[dailyData[&#39;date&#39;].astype(str)==dateRange] dailyCleaned . date state death positiveIncrease totalTestResultsIncrease deathIncrease . 112 20200802 | AK | 24.0 | 157 | 4457 | 0 | . 113 20200802 | AL | 1627.0 | 2095 | 8699 | 24 | . 114 20200802 | AR | 458.0 | 0 | 0 | -2 | . 115 20200802 | AS | 0.0 | 0 | 0 | 0 | . 116 20200802 | AZ | 3765.0 | 1465 | 7778 | 18 | . 117 20200802 | CA | 9356.0 | 9032 | 149388 | 132 | . 118 20200802 | CO | 1691.0 | 458 | 7169 | 0 | . 119 20200802 | CT | 4432.0 | 0 | 0 | 0 | . 120 20200802 | DC | 586.0 | 69 | 3411 | 1 | . 121 20200802 | DE | 585.0 | 72 | 2015 | 0 | . 122 20200802 | FL | 7206.0 | 7104 | 41554 | 62 | . 123 20200802 | GA | 3840.0 | 3165 | 28555 | 15 | . 124 20200802 | GU | 5.0 | 0 | 0 | 0 | . 125 20200802 | HI | 26.0 | 86 | 3390 | 0 | . 126 20200802 | IA | 876.0 | 516 | 5148 | 4 | . 127 20200802 | ID | 197.0 | 393 | 2426 | 8 | . 128 20200802 | IL | 7714.0 | 1467 | 38945 | 14 | . 129 20200802 | IN | 2975.0 | 735 | 10437 | 4 | . 130 20200802 | KS | 358.0 | 0 | 0 | 0 | . 131 20200802 | KY | 742.0 | 462 | 462 | 2 | . 132 20200802 | LA | 4007.0 | 3467 | 37197 | 58 | . 133 20200802 | MA | 8638.0 | 846 | 26110 | 29 | . 134 20200802 | MD | 3515.0 | 909 | 15432 | 9 | . 135 20200802 | ME | 123.0 | 21 | 2328 | 0 | . 136 20200802 | MI | 6457.0 | 429 | 25011 | 0 | . 137 20200802 | MN | 1654.0 | 759 | 12073 | 8 | . 138 20200802 | MO | 1253.0 | 582 | 5722 | 0 | . 139 20200802 | MP | 2.0 | 3 | 3 | 0 | . 140 20200802 | MS | 1703.0 | 672 | 672 | 10 | . 141 20200802 | MT | 61.0 | 112 | 2742 | 0 | . 142 20200802 | NC | 1969.0 | 1341 | 27098 | 5 | . 143 20200802 | ND | 95.0 | 0 | 0 | 0 | . 144 20200802 | NE | 332.0 | 180 | 1984 | 0 | . 145 20200802 | NH | 416.0 | 0 | 0 | 0 | . 146 20200802 | NJ | 15836.0 | 321 | 49180 | 6 | . 147 20200802 | NM | 651.0 | 196 | 7874 | 9 | . 148 20200802 | NV | 832.0 | 1131 | 7899 | 0 | . 149 20200802 | NY | 25170.0 | 531 | 58961 | 6 | . 150 20200802 | OH | 3529.0 | 944 | 24643 | 14 | . 151 20200802 | OK | 550.0 | 494 | 494 | 1 | . 152 20200802 | OR | 326.0 | 280 | 4041 | 1 | . 153 20200802 | PA | 7209.0 | 654 | 12247 | 5 | . 154 20200802 | PR | 230.0 | 539 | 539 | 5 | . 155 20200802 | RI | 1007.0 | 0 | 0 | 0 | . 156 20200802 | SC | 1777.0 | 1189 | 10388 | 26 | . 157 20200802 | SD | 135.0 | 88 | 1021 | 1 | . 158 20200802 | TN | 1073.0 | 1443 | 19445 | 6 | . 159 20200802 | TX | 6837.0 | 0 | 0 | 0 | . 160 20200802 | UT | 311.0 | 473 | 3456 | 1 | . 161 20200802 | VA | 2218.0 | 981 | 12665 | 3 | . 162 20200802 | VI | 8.0 | 0 | 0 | 0 | . 163 20200802 | VT | 57.0 | 5 | 1289 | 0 | . 164 20200802 | WA | 1592.0 | 1738 | 27874 | 28 | . 165 20200802 | WI | 955.0 | 932 | 9653 | 1 | . 166 20200802 | WV | 117.0 | 119 | 3988 | 1 | . 167 20200802 | WY | 26.0 | 39 | 39 | 0 | . #FILTER DATASETS TO KERRY LOCATIONS AND MERGE SETS INTO ONE TABLE startFile=pd.merge(kerryLocs.state, rtCleaned, on=[&#39;state&#39;]) print (&#39;Kerry File Building...&#39;) startFile . newData=pd.merge(startFile, dailyCleaned, on=[&#39;state&#39;]) newData=newData.rename(columns={&#39;date_x&#39;:&#39;date&#39;}) colss = [&#39;date&#39;, &#39;state&#39;, &#39;mean&#39;, &#39;death&#39;, &#39;positiveIncrease&#39;, &#39;totalTestResultsIncrease&#39;, &#39;deathIncrease&#39;] newData[colss] . #ADDING CASES, TESTING, AND DEATHS TO DATA FILE dateRange=&#39;20200802&#39; cols = [&#39;date&#39;, &#39;state&#39;, &#39;death&#39;, &#39;positiveIncrease&#39;, &#39;totalTestResultsIncrease&#39;, &#39;deathIncrease&#39;] dailyData = dailyData[cols] dailyData = dailyData.sort_values(&#39;state&#39;, ascending=True) dailyData = dailyData[dailyData[&#39;date&#39;].astype(str)==dateRange] dailyData newData=pd.merge(startFile, dailyData, on=[&#39;state&#39;]) newData=newData.rename(columns={&#39;date_x&#39;:&#39;date&#39;}) colss = [&#39;date&#39;, &#39;state&#39;, &#39;mean&#39;, &#39;death&#39;, &#39;positiveIncrease&#39;, &#39;totalTestResultsIncrease&#39;, &#39;deathIncrease&#39;] newData[colss] . startFile=pd.merge(kerryLocations.state, rtCleaned, on=[&#39;state&#39;]) print (&#39;Kerry File Building...&#39;) startFile . read = pd.read_csv(&#39;us.csv&#39;) read.shape read.head() fee=[&#39;Kerry Locations&#39;, &#39;State&#39;, &#39;Population&#39;, &#39;SD Past&#39;] tre=read[fee] tre . plt.title(&quot;Canada Matrix Chart&quot;) plt.xlabel(&quot;State&quot;) plt.ylabel(&quot;SD Past&quot;) x = tre[&quot;SD Past&quot;] y = tre[&quot;State&quot;] plt.plot(x,y) . mer = pd.merge(rtChanged, dailyData, on=[&#39;state&#39;]) . mer . meg = pd.merge(kerryLocations, mer, on=&#39;state&#39;) meg = meg.rename(columns={&#39;date_x&#39;:&#39;date&#39;}) coll = [&#39;state&#39;, &#39;mean&#39;, &#39;death&#39;, &#39;positiveIncrease&#39;, &#39;totalTestResultsIncrease&#39;, &#39;deathIncrease&#39;] mew = meg[coll] print (&#39;Kerry Locations&#39;) print (&#39;Matrix Report&#39;) mew . #chart over time fig, ax = plt.subplots(figsize=(10,5)) dailyData.death.plot(c=&quot;g&quot;, label=&quot;Test-adjusted&quot;) dailyData.positiveIncrease.plot(c=&quot;g&quot;, alpha=.5, label=&quot;Test-adjusted (raw)&quot;, style=&quot;--&quot;) dailyData.deathIncrease.plot(c=&quot;b&quot;, label=&quot;Infections&quot;) fig.set_facecolor(&#39;w&#39;) ax.legend(); .",
            "url": "https://richcastro82.github.io/Matrix/jupyter/2020/08/05/USM.html",
            "relUrl": "/jupyter/2020/08/05/USM.html",
            "date": " • Aug 5, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Title",
            "content": "toc: false | comments: true | image: images/US_case_count.png | hide: false | search_exclude: false | categories: geospatial | author: Shantam Raj | badges: true | . Today we will make our first geospatial map from the article Coronavirus in the U.S.: Latest Map and Case Count which looks like the folowing - . import geopandas as gpd import altair as alt import pandas as pd alt.renderers.set_embed_options(actions=False) # Shapefiles from us census state_shpfile = &#39;./shapes/cb_2019_us_state_20m&#39; county_shpfile = &#39;./shapes/cb_2019_us_county_20m&#39; states = gpd.read_file(state_shpfile) county = gpd.read_file(county_shpfile) # Adding longitude and latitude in state data states[&#39;lon&#39;] = states[&#39;geometry&#39;].centroid.x states[&#39;lat&#39;] = states[&#39;geometry&#39;].centroid.y # Adding longitude and latitude in state data county[&#39;lon&#39;] = county[&#39;geometry&#39;].centroid.x county[&#39;lat&#39;] = county[&#39;geometry&#39;].centroid.y . # NYT dataset county_url = &#39;https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv&#39; cdf = pd.read_csv(county_url) . cdf[cdf[&#39;fips&#39;].isnull() == True].groupby([&#39;county&#39;]).sum() . fips cases deaths . county . Joplin 0.0 | 329 | 4 | . Kansas City 0.0 | 85094 | 1700 | . New York City 0.0 | 15615980 | 1528538 | . Unknown 0.0 | 885104 | 41064 | . #hide_output cdf[cdf[&#39;fips&#39;].isnull() == True].groupby([&#39;county&#39;, &#39;state&#39;]).sum() . NYT publishes the data for New York City in a different way by combining the results of the 5 boroughs that comprise it. So we will combine them too and add a new row in the dataset with a custom fips of 1. Let&#39;s start by making this change in the raw NYT dataset itself. . cdf.loc[cdf[&#39;county&#39;] == &#39;New York City&#39;,&#39;fips&#39;] = 1 cdf[cdf[&#39;county&#39;] == &#39;New York City&#39;] . date county state fips cases deaths . 416 2020-03-01 | New York City | New York | 1.0 | 1 | 0 | . 448 2020-03-02 | New York City | New York | 1.0 | 1 | 0 | . 482 2020-03-03 | New York City | New York | 1.0 | 2 | 0 | . 518 2020-03-04 | New York City | New York | 1.0 | 2 | 0 | . 565 2020-03-05 | New York City | New York | 1.0 | 4 | 0 | . ... ... | ... | ... | ... | ... | ... | . 262876 2020-06-23 | New York City | New York | 1.0 | 217803 | 21817 | . 265930 2020-06-24 | New York City | New York | 1.0 | 218089 | 21838 | . 268988 2020-06-25 | New York City | New York | 1.0 | 218429 | 21856 | . 272054 2020-06-26 | New York City | New York | 1.0 | 218799 | 21893 | . 275123 2020-06-27 | New York City | New York | 1.0 | 219157 | 21913 | . 119 rows × 6 columns . # collapse latest_cases = cdf.groupby(&#39;fips&#39;, as_index=False).agg({&#39;county&#39;: &#39;last&#39;, &#39;date&#39;: &#39;last&#39;, &#39;state&#39;: &#39;last&#39;, &#39;cases&#39;: &#39;last&#39;, &#39;deaths&#39;: &#39;last&#39;}) latest_cases . . fips county date state cases deaths . 0 1.0 | New York City | 2020-06-27 | New York | 219157 | 21913 | . 1 1001.0 | Autauga | 2020-06-27 | Alabama | 498 | 12 | . 2 1003.0 | Baldwin | 2020-06-27 | Alabama | 555 | 10 | . 3 1005.0 | Barbour | 2020-06-27 | Alabama | 317 | 1 | . 4 1007.0 | Bibb | 2020-06-27 | Alabama | 161 | 1 | . ... ... | ... | ... | ... | ... | ... | . 3038 56037.0 | Sweetwater | 2020-06-27 | Wyoming | 81 | 0 | . 3039 56039.0 | Teton | 2020-06-27 | Wyoming | 119 | 1 | . 3040 56041.0 | Uinta | 2020-06-27 | Wyoming | 167 | 0 | . 3041 56043.0 | Washakie | 2020-06-27 | Wyoming | 38 | 5 | . 3042 56045.0 | Weston | 2020-06-27 | Wyoming | 1 | 0 | . 3043 rows × 6 columns . Now we have to make the changes in our shapefile too. For that we need to **dissolve** the 5 buroughs into one single geospatial entity. . #New York City fips = 36005&#39;, &#39;36047&#39;, &#39;36061&#39;, &#39;36081&#39;, &#39;36085 which corresponds to New York, Kings, Queens, Bronx and Richmond spatial_nyc = county[county[&#39;GEOID&#39;].isin([&#39;36005&#39;, &#39;36047&#39;, &#39;36061&#39;, &#39;36081&#39;, &#39;36085&#39;])] . combined_nyc = spatial_nyc.dissolve(by=&#39;STATEFP&#39;) alt.Chart(spatial_nyc).mark_geoshape(stroke=&#39;white&#39;, strokeWidth=3).encode() | alt.Chart(combined_nyc).mark_geoshape(stroke=&#39;white&#39;, strokeWidth=3).encode() . agg_nyc_data = spatial_nyc.dissolve(by=&#39;STATEFP&#39;).reset_index() agg_nyc_data[&#39;GEOID&#39;] = &#39;1&#39; agg_nyc_data[&#39;fips&#39;] = 1 agg_nyc_data[&#39;lon&#39;] = agg_nyc_data[&#39;geometry&#39;].centroid.x agg_nyc_data[&#39;lat&#39;] = agg_nyc_data[&#39;geometry&#39;].centroid.y . agg_nyc_data . STATEFP geometry COUNTYFP COUNTYNS AFFGEOID GEOID NAME LSAD ALAND AWATER lon lat fips . 0 36 | POLYGON ((-74.24921 40.54506, -74.21684 40.558... | 061 | 00974129 | 0500000US36061 | 1 | New York | 06 | 58690498 | 28541727 | -73.927011 | 40.695278 | 1 | . # hide_output county_nyc = gpd.GeoDataFrame(pd.concat([county, agg_nyc_data], ignore_index=True)) county_nyc[&#39;fips&#39;] = county_nyc[&#39;GEOID&#39;] county_nyc[&#39;fips&#39;] = county_nyc[&#39;fips&#39;].astype(&#39;int&#39;) county_nyc # generate FIPS in the shapefile itself by combining STATEFP and COUNTYFP #county2[&#39;STATEFP&#39;] + county2[&#39;COUNTYFP&#39;] #latest_cases[&#39;fips&#39;] = latest_cases[&#39;fips&#39;].astype(&#39;int&#39;) . latest_cases[&#39;fips&#39;].isin(county_nyc[&#39;fips&#39;]).value_counts() . True 3043 Name: fips, dtype: int64 . latest_cases[latest_cases[&#39;county&#39;] == &#39;New York City&#39;] . fips county date state cases deaths . 0 1.0 | New York City | 2020-06-27 | New York | 219157 | 21913 | . county_nyc[county_nyc[&#39;fips&#39;] == 1] . STATEFP COUNTYFP COUNTYNS AFFGEOID GEOID NAME LSAD ALAND AWATER geometry lon lat fips . 3220 36 | 061 | 00974129 | 0500000US36061 | 1 | New York | 06 | 58690498 | 28541727 | POLYGON ((-74.24921 40.54506, -74.21684 40.558... | -73.927011 | 40.695278 | 1 | . # collapse latest_cases_w_fips = county_nyc.merge(latest_cases, how=&#39;left&#39;, on=&#39;fips&#39;) circle_selection = alt.selection_single(on=&#39;mouseover&#39;, empty=&#39;none&#39;) circles = alt.Chart(latest_cases_w_fips).mark_point(fillOpacity=0.2, fill=&#39;red&#39;, strokeOpacity=1, color=&#39;red&#39;, strokeWidth=1).encode( latitude=&quot;lat:Q&quot;, longitude=&quot;lon:Q&quot;, size=alt.Size(&#39;cases:Q&#39;, scale=alt.Scale(domain=[0, 7000],),legend=alt.Legend(title=&quot;Cases&quot;)), tooltip=[&#39;county:N&#39;, &#39;cases:Q&#39;, &#39;deaths:Q&#39;], color = alt.condition(circle_selection, alt.value(&#39;black&#39;), alt.value(&#39;red&#39;)) ).project( type=&#39;albersUsa&#39; ).properties( width=1000, height=700 ).add_selection( circle_selection ) state = alt.Chart(states).mark_geoshape(fill=&#39;#ededed&#39;, stroke=&#39;white&#39;).encode( ).project( type=&#39;albersUsa&#39; ) state_text = state.mark_text().transform_filter(alt.datum.NAME != &#39;Puerto Rico&#39;).encode( longitude=&#39;lon:Q&#39;, latitude=&#39;lat:Q&#39;, text=&#39;NAME&#39;, ).project( type=&#39;albersUsa&#39; ) . . (state+circles+state_text).configure_view(strokeWidth=0) .",
            "url": "https://richcastro82.github.io/Matrix/2020/06/12/US-case-counts-geospatial.html",
            "relUrl": "/2020/06/12/US-case-counts-geospatial.html",
            "date": " • Jun 12, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . #collapse-hide import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . #collapse-show cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # single-value selection over [Major_Genre, MPAA_Rating] pairs # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . # select a point for which to provide details-on-demand label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . # display table with pandas df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://richcastro82.github.io/Matrix/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://richcastro82.github.io/Matrix/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This is where you put the contents of your About page. Like all your pages, it’s in Markdown format. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://richcastro82.github.io/Matrix/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://richcastro82.github.io/Matrix/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}